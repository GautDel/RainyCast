{"ast":null,"code":"var _jsxFileName = \"/Users/gauthierdelalleau/Desktop/weather-app/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Background from \"./components/Background.js\";\nimport Time from \"./components/Time.js\";\nimport Moon from \"./components/Moon.js\";\nimport Forecast from \"./components/Forecast.js\";\nimport Today from \"./components/Today.js\";\nimport Hourly from \"./components/Hourly.js\";\nimport Daily from \"./components/Daily.js\";\nimport './App.css';\n\nfunction App() {\n  // State\n  const [time, setTime] = useState(\"\");\n  const [hour, setHour] = useState(\"\");\n  const [day, setDay] = useState(\"\");\n  const [daily, setDaily] = useState(\"\");\n  const [hourly, setHourly] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n  const [zone, setZone] = useState(\"\");\n  const [temp, setTemp] = useState(\"\"); // Run scripts when App mounts\n\n  useEffect(() => {\n    getLocation();\n    setInterval(() => {\n      getTime();\n    }, 1000);\n  }, []); // Fahrenheit to Celsius\n\n  const fToC = temp => {\n    const celsius = Math.floor((temp - 32) / 1.8);\n    return celsius;\n  }; // Render hourly forecast list\n\n\n  const renderHourly = () => {\n    if (hourly.data !== undefined) {\n      let rendered = hourly.data.map((hour, i) => {\n        return React.createElement(Hourly, {\n          hour: hour,\n          fToC: fToC,\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      });\n      return rendered;\n    }\n  }; // Render daily forecast list\n\n\n  const renderDaily = () => {\n    if (daily.data !== undefined) {\n      let rendered = daily.data.map((day, i) => {\n        return React.createElement(Daily, {\n          day: day,\n          fToC: fToC,\n          key: i,\n          i: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      });\n      return rendered;\n    }\n  }; // Render Moon\n\n\n  const renderMoon = () => {\n    if (daily.data !== undefined) {\n      let moon = React.createElement(Moon, {\n        moonPhase: daily.data[0].moonPhase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n      return moon;\n    }\n  };\n\n  const renderBackground = () => {\n    let link;\n\n    switch (true) {\n      // Clear morning\n      case hour >= 5 && hour <= 9 && weather.icon === \"clear-day\":\n        link = \"clear-morning.jpg\";\n        break;\n      // Partly cloudy morning\n\n      case hour >= 5 && hour <= 9 && weather.icon === \"partly-cloudy-day\":\n        link = \"clear-morning.jpg\";\n        break;\n      // Clear day\n\n      case hour >= 9 && hour <= 18 && weather.icon === \"clear-day\":\n        link = \"clear-day.jpg\";\n        break;\n      // Partly cloudy day\n\n      case hour >= 9 && hour <= 18 && weather.icon === \"clear-day\":\n        link = \"clear-day.jpg\";\n        break;\n      // Rainy day\n\n      case hour >= 9 && hour <= 18 && weather.icon === \"rain\":\n        link = \"rain-day.jpg\";\n        break;\n      // Cloudy Day\n\n      case hour >= 9 && hour <= 18 && weather.icon === \"cloudy\":\n        link = \"cloudy-day.jpg\";\n        break;\n      // Rainy night\n\n      case hour >= 19 && hour <= 4 && weather.icon === \"rain\":\n        link = \"rain-night.jpg\";\n        break;\n      // Cloudy night\n\n      case hour >= 19 && hour <= 4 && weather.icon === \"cloudy\":\n        link = \"cloudy-night.jpg\";\n        break;\n      // Snowy day\n\n      case hour >= 5 && hour <= 18 && weather.icon === \"snow\":\n        link = \"snow.jpg\";\n        break;\n      // Default day\n\n      case hour >= 5 && hour <= 18:\n        link = \"clear-day.jpg\";\n        break;\n      // Default night\n\n      case hour >= 19:\n        link = \"clear-night.jpg\";\n        break;\n    }\n\n    console.log(parseInt(hour));\n    console.log(weather.icon);\n    console.log(link);\n  }; // Fetch weather from API / Set state\n\n\n  const getWeather = async (latitude, longitude) => {\n    const forecast = await axios.get(`https://api.darksky.net/forecast/90f6dc370d1bbd73bc4e6216147431ff/${latitude},${longitude}`);\n    setWeather(forecast.data.currently);\n    setDaily(forecast.data.daily);\n    setHourly(forecast.data.hourly);\n    setZone(forecast.data.timezone);\n    setTemp(fToC(forecast.data.currently.temperature));\n  }; // Changes single digit number into double. ie: 1 => 01\n\n\n  const setNum = num => {\n    let number = num;\n\n    switch (num) {\n      case 0:\n        number = \"00\";\n        break;\n\n      case 1:\n        number = \"01\";\n        break;\n\n      case 2:\n        number = \"02\";\n        break;\n\n      case 3:\n        number = \"03\";\n        break;\n\n      case 4:\n        number = \"04\";\n        break;\n\n      case 5:\n        number = \"05\";\n        break;\n\n      case 6:\n        number = \"06\";\n        break;\n\n      case 7:\n        number = \"07\";\n        break;\n\n      case 8:\n        number = \"08\";\n        break;\n\n      case 9:\n        number = \"09\";\n        break;\n    }\n\n    return number;\n  }; // Get Current Time\n\n\n  const getTime = () => {\n    // Variables\n    const date = new Date();\n    let hour = setNum(date.getHours());\n    let minute = setNum(date.getMinutes());\n    let second = setNum(date.getSeconds());\n    const day = date.getDay();\n    let dayMonth = setNum(date.getDate());\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; // Set State\n\n    setTime(`${hour} : ${minute} : ${second}`);\n    setDay(`${days[day]}, ${dayMonth}`);\n    setHour(hour);\n  }; // Get Location\n\n\n  const getLocation = () => {\n    let msg;\n\n    const success = position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      msg = \"Updating your weather forecast...\"; // Passes location values to Weather API\n\n      getWeather(latitude, longitude);\n      console.log(msg);\n    };\n\n    const error = () => {\n      \"Helpppp\";\n    };\n\n    if (!navigator.geolocation) {\n      msg = 'Geolocation is not supported by your browser';\n    } else {\n      msg = \"Locatingâ€¦\";\n      navigator.geolocation.getCurrentPosition(success, error, {\n        enableHighAccuracy: true,\n        maximumAge: 10000\n      });\n    }\n\n    console.log(msg);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Background, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), renderBackground(), React.createElement(Time, {\n    time: time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }), renderMoon(), React.createElement(Forecast, {\n    weather: weather,\n    zone: zone,\n    temp: temp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }), React.createElement(Today, {\n    day: day,\n    daily: daily,\n    fToC: fToC,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"hourly-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, renderHourly()), React.createElement(\"div\", {\n    className: \"daily-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, renderDaily()), React.createElement(\"footer\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"https://darksky.net/dev\",\n    rel: \"noopener noreferrer\",\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, \"Powered By Dark Sky API\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"https://www.gautdel.com\",\n    rel: \"noopener noreferrer\",\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, \"GautDel\"))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/gauthierdelalleau/Desktop/weather-app/src/App.js"],"names":["React","useState","useEffect","axios","Background","Time","Moon","Forecast","Today","Hourly","Daily","App","time","setTime","hour","setHour","day","setDay","daily","setDaily","hourly","setHourly","weather","setWeather","zone","setZone","temp","setTemp","getLocation","setInterval","getTime","fToC","celsius","Math","floor","renderHourly","data","undefined","rendered","map","i","renderDaily","renderMoon","moon","moonPhase","renderBackground","link","icon","console","log","parseInt","getWeather","latitude","longitude","forecast","get","currently","timezone","temperature","setNum","num","number","date","Date","getHours","minute","getMinutes","second","getSeconds","getDay","dayMonth","getDate","days","msg","success","position","coords","error","navigator","geolocation","getCurrentPosition","enableHighAccuracy","maximumAge"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Background from \"./components/Background.js\";\nimport Time from \"./components/Time.js\";\nimport Moon from \"./components/Moon.js\";\nimport Forecast from \"./components/Forecast.js\";\nimport Today from \"./components/Today.js\";\nimport Hourly from \"./components/Hourly.js\";\nimport Daily from \"./components/Daily.js\";\nimport './App.css';\n\nfunction App() {\n\n  // State\n  const [time, setTime] = useState(\"\");\n  const [hour, setHour] = useState(\"\");\n  const [day, setDay] = useState(\"\");\n  const [daily, setDaily] = useState(\"\");\n  const [hourly, setHourly] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n  const [zone, setZone] = useState(\"\")\n  const [temp, setTemp] = useState(\"\")\n\n  // Run scripts when App mounts\n  useEffect(() => {\n    getLocation();\n\n    setInterval(() => {\n      getTime();\n    }, 1000);\n  }, []);\n\n  // Fahrenheit to Celsius\n  const fToC = (temp) => {\n    const celsius = Math.floor((temp - 32) / 1.8);\n    return celsius;\n  }\n\n  // Render hourly forecast list\n  const renderHourly = () => {\n    if (hourly.data !== undefined) {\n      let rendered = hourly.data.map((hour, i) => {\n        return <Hourly hour={hour} fToC={fToC} key={i} />\n      })\n      return rendered;\n    }\n  }\n\n  // Render daily forecast list\n  const renderDaily = () => {\n    if (daily.data !== undefined) {\n      let rendered = daily.data.map((day, i) => {\n        return <Daily day={day} fToC={fToC} key={i} i={i} />\n      })\n      return rendered;\n    }\n  }\n\n  // Render Moon\n  const renderMoon = () => {\n    if (daily.data !== undefined) {\n      let moon = <Moon moonPhase={daily.data[0].moonPhase} />\n      return moon;\n    }\n\n  }\n\n  const renderBackground = () => {\n    let link;\n\n    switch (true) {\n      // Clear morning\n      case (hour >= 5 && hour <= 9 && weather.icon === \"clear-day\"): link = \"clear-morning.jpg\";\n        break;\n\n      // Partly cloudy morning\n      case (hour >= 5 && hour <= 9 && weather.icon === \"partly-cloudy-day\"): link = \"clear-morning.jpg\";\n        break;\n\n      // Clear day\n      case (hour >= 9 && hour <= 18 && weather.icon === \"clear-day\"): link = \"clear-day.jpg\";\n        break;\n\n      // Partly cloudy day\n      case (hour >= 9 && hour <= 18 && weather.icon === \"clear-day\"): link = \"clear-day.jpg\";\n        break;\n\n      // Rainy day\n      case (hour >= 9 && hour <= 18 && weather.icon === \"rain\"): link = \"rain-day.jpg\";\n        break;\n\n      // Cloudy Day\n      case (hour >= 9 && hour <= 18 && weather.icon === \"cloudy\"): link = \"cloudy-day.jpg\";\n        break;\n\n      // Rainy night\n      case (hour >= 19 && hour <= 4 && weather.icon === \"rain\"): link = \"rain-night.jpg\";\n        break;\n\n      // Cloudy night\n      case (hour >= 19 && hour <= 4 && weather.icon === \"cloudy\"): link = \"cloudy-night.jpg\";\n        break;\n\n      // Snowy day\n\n      case (hour >= 5 && hour <= 18 && weather.icon === \"snow\"): link = \"snow.jpg\";\n        break;\n\n      // Default day\n      case (hour >= 5 && hour <= 18): link = \"clear-day.jpg\";\n        break;\n\n      // Default night\n      case (hour >= 19): link = \"clear-night.jpg\";\n        break;\n    }\n\n    console.log(parseInt(hour))\n    console.log(weather.icon);\n    console.log(link)\n  }\n\n  // Fetch weather from API / Set state\n  const getWeather = async (latitude, longitude) => {\n    const forecast = await axios.get(`https://api.darksky.net/forecast/90f6dc370d1bbd73bc4e6216147431ff/${latitude},${longitude}`);\n\n    setWeather(forecast.data.currently);\n    setDaily(forecast.data.daily);\n    setHourly(forecast.data.hourly);\n    setZone(forecast.data.timezone);\n    setTemp(fToC(forecast.data.currently.temperature));\n\n  }\n\n  // Changes single digit number into double. ie: 1 => 01\n  const setNum = (num) => {\n    let number = num;\n    switch (num) {\n      case 0: number = \"00\";\n        break;\n      case 1: number = \"01\";\n        break;\n      case 2: number = \"02\";\n        break;\n      case 3: number = \"03\";\n        break;\n      case 4: number = \"04\";\n        break;\n      case 5: number = \"05\";\n        break;\n      case 6: number = \"06\";\n        break;\n      case 7: number = \"07\";\n        break;\n      case 8: number = \"08\";\n        break;\n      case 9: number = \"09\";\n        break;\n    }\n\n    return number;\n  }\n\n\n  // Get Current Time\n  const getTime = () => {\n\n    // Variables\n    const date = new Date();\n    let hour = setNum(date.getHours());\n    let minute = setNum(date.getMinutes());\n    let second = setNum(date.getSeconds());\n    const day = date.getDay();\n    let dayMonth = setNum(date.getDate());\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    // Set State\n    setTime(`${hour} : ${minute} : ${second}`);\n    setDay(`${days[day]}, ${dayMonth}`);\n    setHour(hour);\n  };\n\n\n\n  // Get Location\n  const getLocation = () => {\n    let msg;\n    const success = (position) => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      msg = \"Updating your weather forecast...\"\n      // Passes location values to Weather API\n      getWeather(latitude, longitude);\n      console.log(msg)\n    }\n\n    const error = () => {\n      \"Helpppp\"\n    }\n\n    if (!navigator.geolocation) {\n      msg = 'Geolocation is not supported by your browser';\n    } else {\n      msg = \"Locatingâ€¦\";\n      navigator.geolocation.getCurrentPosition(success, error, { enableHighAccuracy: true, maximumAge: 10000 });\n    }\n\n    console.log(msg)\n  }\n\n\n\n  return (\n    <>\n      <Background />\n      {renderBackground()}\n      <Time time={time} />\n      {renderMoon()}\n      <Forecast weather={weather} zone={zone} temp={temp} />\n      <Today day={day} daily={daily} fToC={fToC} />\n      <div className=\"hourly-container\">\n        {renderHourly()}\n      </div>\n      <div className=\"daily-container\">\n        {renderDaily()}\n      </div>\n      <footer>\n        <div>\n          <a href=\"https://darksky.net/dev\" rel=\"noopener noreferrer\" target=\"_blank\">Powered By Dark Sky API</a>\n        </div>\n        <div><a href=\"https://www.gautdel.com\" rel=\"noopener noreferrer\" target=\"_blank\">GautDel</a></div>\n      </footer>\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}