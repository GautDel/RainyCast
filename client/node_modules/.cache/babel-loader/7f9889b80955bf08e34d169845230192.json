{"ast":null,"code":"var _jsxFileName = \"/Users/gauthierdelalleau/Desktop/weather-app/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\nfunction App() {\n  // State\n  const [time, setTime] = useState(\"Fetching...\");\n  const [day, setDay] = useState(\" Fetching...\");\n  const [weather, setWeather] = useState(\"Fetching Weather...\"); // run scripts with component mounts\n\n  useEffect(() => {\n    getLocation();\n    setInterval(() => {\n      getTime();\n    }, 1000);\n  }, []);\n\n  const getWeather = position => {\n    const lat = position.coords.latitude;\n    const long = position.coords.longitude; // const forecast = await axios.get('https://api.darksky.net/forecast/90f6dc370d1bbd73bc4e6216147431ff/51.897869,-8.471090');\n    // setWeather(forecast.data.currently);\n  }; // Changes single digit number into double. ie: 1 => 01\n\n\n  const setNum = num => {\n    let number = num;\n\n    switch (num) {\n      case 0:\n        number = \"00\";\n        break;\n\n      case 1:\n        number = \"01\";\n        break;\n\n      case 2:\n        number = \"02\";\n        break;\n\n      case 3:\n        number = \"03\";\n        break;\n\n      case 4:\n        number = \"04\";\n        break;\n\n      case 5:\n        number = \"05\";\n        break;\n\n      case 6:\n        number = \"06\";\n        break;\n\n      case 7:\n        number = \"07\";\n        break;\n\n      case 8:\n        number = \"08\";\n        break;\n\n      case 9:\n        number = \"09\";\n        break;\n    }\n\n    return number;\n  }; // Get Current Time\n\n\n  const getTime = () => {\n    // Variables\n    const date = new Date();\n    let hour = setNum(date.getHours());\n    let minute = setNum(date.getMinutes());\n    let second = setNum(date.getSeconds());\n    const day = date.getDay();\n    let dayMonth = setNum(date.getDate());\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; // Set State\n\n    setTime(`${hour} : ${minute} : ${second}`);\n    setDay(`${days[day]}, ${dayMonth}`);\n  }; // Get Location\n\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      let msg = \"Geolocation is not supported\";\n    } else {\n      msg = \"Locating...\";\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, time), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, day));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/gauthierdelalleau/Desktop/weather-app/src/App.js"],"names":["React","useState","useEffect","axios","App","time","setTime","day","setDay","weather","setWeather","getLocation","setInterval","getTime","getWeather","position","lat","coords","latitude","long","longitude","setNum","num","number","date","Date","hour","getHours","minute","getMinutes","second","getSeconds","getDay","dayMonth","getDate","days","navigator","geolocation","msg","getCurrentPosition","success","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\nfunction App() {\n\n  // State\n  const [time, setTime] = useState(\"Fetching...\");\n  const [day, setDay] = useState(\" Fetching...\");\n  const [weather, setWeather] = useState(\"Fetching Weather...\");\n\n\n  // run scripts with component mounts\n  useEffect(() => {\n    getLocation();\n    setInterval(() => {\n      getTime();\n    }, 1000);\n  }, []);\n\n  const getWeather = (position) => {\n    const lat = position.coords.latitude;\n    const long = position.coords.longitude\n    // const forecast = await axios.get('https://api.darksky.net/forecast/90f6dc370d1bbd73bc4e6216147431ff/51.897869,-8.471090');\n\n    // setWeather(forecast.data.currently);\n  }\n\n  // Changes single digit number into double. ie: 1 => 01\n  const setNum = (num) => {\n    let number = num;\n    switch (num) {\n      case 0: number = \"00\";\n        break;\n      case 1: number = \"01\";\n        break;\n      case 2: number = \"02\";\n        break;\n      case 3: number = \"03\";\n        break;\n      case 4: number = \"04\";\n        break;\n      case 5: number = \"05\";\n        break;\n      case 6: number = \"06\";\n        break;\n      case 7: number = \"07\";\n        break;\n      case 8: number = \"08\";\n        break;\n      case 9: number = \"09\";\n        break;\n    }\n\n    return number;\n  }\n\n\n  // Get Current Time\n  const getTime = () => {\n    // Variables\n    const date = new Date();\n    let hour = setNum(date.getHours());\n    let minute = setNum(date.getMinutes());\n    let second = setNum(date.getSeconds());\n    const day = date.getDay();\n    let dayMonth = setNum(date.getDate());\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    // Set State\n    setTime(`${hour} : ${minute} : ${second}`);\n    setDay(`${days[day]}, ${dayMonth}`);\n  };\n\n  // Get Location\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      let msg = \"Geolocation is not supported\";\n    } else {\n      msg = \"Locating...\";\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n\n  }\n\n\n\n  return (\n    <>\n      <h1>{time}</h1>\n      <h2>{day}</h2>\n      {/* sky bg => based on time */}\n      {/* Weather bg => based on weather app */}\n      {/* Time */}\n      {/* Date */}\n      {/* Forecast */}\n      {/* Dark Sky link */}\n      {/* My name */}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}