{"ast":null,"code":"var _jsxFileName = \"/Users/gauthierdelalleau/Desktop/weather-app/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Forecast from \"./components/Forecast.js\";\nimport Today from \"./components/Today.js\";\nimport './App.css';\n\nfunction App() {\n  // State\n  const [time, setTime] = useState(\"Fetching Time...\");\n  const [day, setDay] = useState(\" Fetching Date...\");\n  const [daily, setDaily] = useState(\"Fetching Daily Forecast...\");\n  const [hourly, setHourly] = useState(\" Fetching Hourly Forecast...\");\n  const [weather, setWeather] = useState(\"Windy and Partly Cloudy\");\n  const [zone, setZone] = useState(\"Europe/Dublin\");\n  const [temp, setTemp] = useState(\"7.3\"); // Run scripts with component mounts\n\n  useEffect(() => {\n    getLocation();\n    setInterval(() => {\n      getTime();\n    }, 1000);\n  }, []); // Fahrenheit to Celsius\n\n  const fToC = temp => {\n    const celsius = Math.floor((temp - 32) / 1.8);\n    return celsius;\n  };\n\n  const getWeather = async (latitude, longitude) => {\n    const forecast = await axios.get(`https://api.darksky.net/forecast/90f6dc370d1bbd73bc4e6216147431ff/${latitude},${longitude}`);\n    let time = new Date(forecast.data.currently.time);\n    let hours = time.getDay();\n    console.log(hours);\n    setWeather(forecast.data.currently);\n    setDaily(forecast.data.daily);\n    setHourly(forecast.data.hourly);\n    setZone(forecast.data.timezone);\n    setTemp(fToC(forecast.data.currently.temperature));\n  }; // Changes single digit number into double. ie: 1 => 01\n\n\n  const setNum = num => {\n    let number = num;\n\n    switch (num) {\n      case 0:\n        number = \"00\";\n        break;\n\n      case 1:\n        number = \"01\";\n        break;\n\n      case 2:\n        number = \"02\";\n        break;\n\n      case 3:\n        number = \"03\";\n        break;\n\n      case 4:\n        number = \"04\";\n        break;\n\n      case 5:\n        number = \"05\";\n        break;\n\n      case 6:\n        number = \"06\";\n        break;\n\n      case 7:\n        number = \"07\";\n        break;\n\n      case 8:\n        number = \"08\";\n        break;\n\n      case 9:\n        number = \"09\";\n        break;\n    }\n\n    return number;\n  }; // Get Current Time\n\n\n  const getTime = () => {\n    // Variables\n    const date = new Date();\n    let hour = setNum(date.getHours());\n    let minute = setNum(date.getMinutes());\n    let second = setNum(date.getSeconds());\n    const day = date.getDay();\n    let dayMonth = setNum(date.getDate());\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; // Set State\n\n    setTime(`${hour} : ${minute} : ${second}`);\n    setDay(`${days[day]}, ${dayMonth}`);\n  }; // Get Location\n\n\n  const getLocation = () => {\n    let msg;\n\n    const success = position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude; // Passes location values to Weather API\n\n      getWeather(latitude, longitude);\n    };\n\n    const error = () => {\n      \"Helpppp\";\n    };\n\n    if (!navigator.geolocation) {\n      msg = 'Geolocation is not supported by your browser';\n    } else {\n      msg = 'Locatingâ€¦';\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Forecast, {\n    weather: weather,\n    zone: zone,\n    temp: temp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(Today, {\n    day: day,\n    daily: daily,\n    fToC: fToC,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/gauthierdelalleau/Desktop/weather-app/src/App.js"],"names":["React","useState","useEffect","axios","Forecast","Today","App","time","setTime","day","setDay","daily","setDaily","hourly","setHourly","weather","setWeather","zone","setZone","temp","setTemp","getLocation","setInterval","getTime","fToC","celsius","Math","floor","getWeather","latitude","longitude","forecast","get","Date","data","currently","hours","getDay","console","log","timezone","temperature","setNum","num","number","date","hour","getHours","minute","getMinutes","second","getSeconds","dayMonth","getDate","days","msg","success","position","coords","error","navigator","geolocation","getCurrentPosition"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AAEb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,kBAAD,CAAhC;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,mBAAD,CAA9B;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,4BAAD,CAAlC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,8BAAD,CAApC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,yBAAD,CAAtC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,eAAD,CAAhC;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,KAAD,CAAhC,CATa,CAWb;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,WAAW;AAEXC,IAAAA,WAAW,CAAC,MAAM;AAChBC,MAAAA,OAAO;AACR,KAFU,EAER,IAFQ,CAAX;AAGD,GANQ,EAMN,EANM,CAAT,CAZa,CAoBb;;AACA,QAAMC,IAAI,GAAIL,IAAD,IAAU;AACrB,UAAMM,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACR,IAAI,GAAG,EAAR,IAAc,GAAzB,CAAhB;AACA,WAAOM,OAAP;AACD,GAHD;;AAKA,QAAMG,UAAU,GAAG,OAAOC,QAAP,EAAiBC,SAAjB,KAA+B;AAChD,UAAMC,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CAAW,qEAAoEH,QAAS,IAAGC,SAAU,EAArG,CAAvB;AACA,QAAIvB,IAAI,GAAG,IAAI0B,IAAJ,CAASF,QAAQ,CAACG,IAAT,CAAcC,SAAd,CAAwB5B,IAAjC,CAAX;AACA,QAAI6B,KAAK,GAAG7B,IAAI,CAAC8B,MAAL,EAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEApB,IAAAA,UAAU,CAACe,QAAQ,CAACG,IAAT,CAAcC,SAAf,CAAV;AACAvB,IAAAA,QAAQ,CAACmB,QAAQ,CAACG,IAAT,CAAcvB,KAAf,CAAR;AACAG,IAAAA,SAAS,CAACiB,QAAQ,CAACG,IAAT,CAAcrB,MAAf,CAAT;AACAK,IAAAA,OAAO,CAACa,QAAQ,CAACG,IAAT,CAAcM,QAAf,CAAP;AACApB,IAAAA,OAAO,CAACI,IAAI,CAACO,QAAQ,CAACG,IAAT,CAAcC,SAAd,CAAwBM,WAAzB,CAAL,CAAP;AAED,GAZD,CA1Ba,CAwCb;;;AACA,QAAMC,MAAM,GAAIC,GAAD,IAAS;AACtB,QAAIC,MAAM,GAAGD,GAAb;;AACA,YAAQA,GAAR;AACE,WAAK,CAAL;AAAQC,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;;AACF,WAAK,CAAL;AAAQA,QAAAA,MAAM,GAAG,IAAT;AACN;AApBJ;;AAuBA,WAAOA,MAAP;AACD,GA1BD,CAzCa,CAsEb;;;AACA,QAAMrB,OAAO,GAAG,MAAM;AACpB;AACA,UAAMsB,IAAI,GAAG,IAAIZ,IAAJ,EAAb;AACA,QAAIa,IAAI,GAAGJ,MAAM,CAACG,IAAI,CAACE,QAAL,EAAD,CAAjB;AACA,QAAIC,MAAM,GAAGN,MAAM,CAACG,IAAI,CAACI,UAAL,EAAD,CAAnB;AACA,QAAIC,MAAM,GAAGR,MAAM,CAACG,IAAI,CAACM,UAAL,EAAD,CAAnB;AACA,UAAM1C,GAAG,GAAGoC,IAAI,CAACR,MAAL,EAAZ;AACA,QAAIe,QAAQ,GAAGV,MAAM,CAACG,IAAI,CAACQ,OAAL,EAAD,CAArB;AACA,UAAMC,IAAI,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAAb,CARoB,CAUpB;;AACA9C,IAAAA,OAAO,CAAE,GAAEsC,IAAK,MAAKE,MAAO,MAAKE,MAAO,EAAjC,CAAP;AACAxC,IAAAA,MAAM,CAAE,GAAE4C,IAAI,CAAC7C,GAAD,CAAM,KAAI2C,QAAS,EAA3B,CAAN;AACD,GAbD,CAvEa,CAwFb;;;AACA,QAAM/B,WAAW,GAAG,MAAM;AACxB,QAAIkC,GAAJ;;AACA,UAAMC,OAAO,GAAIC,QAAD,IAAc;AAC5B,YAAM5B,QAAQ,GAAG4B,QAAQ,CAACC,MAAT,CAAgB7B,QAAjC;AACA,YAAMC,SAAS,GAAG2B,QAAQ,CAACC,MAAT,CAAgB5B,SAAlC,CAF4B,CAI5B;;AACAF,MAAAA,UAAU,CAACC,QAAD,EAAWC,SAAX,CAAV;AACD,KAND;;AAQA,UAAM6B,KAAK,GAAG,MAAM;AAClB;AACD,KAFD;;AAIA,QAAI,CAACC,SAAS,CAACC,WAAf,EAA4B;AAC1BN,MAAAA,GAAG,GAAG,8CAAN;AACD,KAFD,MAEO;AACLA,MAAAA,GAAG,GAAG,WAAN;AACAK,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCN,OAAzC,EAAkDG,KAAlD;AACD;AACF,GApBD;;AAwBA,SACE,0CACE,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAE5C,OAAnB;AAA4B,IAAA,IAAI,EAAEE,IAAlC;AAAwC,IAAA,IAAI,EAAEE,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEV,GAAZ;AAAiB,IAAA,KAAK,EAAEE,KAAxB;AAA+B,IAAA,IAAI,EAAEa,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAQD;;AAED,eAAelB,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Forecast from \"./components/Forecast.js\";\nimport Today from \"./components/Today.js\";\nimport './App.css';\n\nfunction App() {\n\n  // State\n  const [time, setTime] = useState(\"Fetching Time...\");\n  const [day, setDay] = useState(\" Fetching Date...\");\n  const [daily, setDaily] = useState(\"Fetching Daily Forecast...\");\n  const [hourly, setHourly] = useState(\" Fetching Hourly Forecast...\");\n  const [weather, setWeather] = useState(\"Windy and Partly Cloudy\");\n  const [zone, setZone] = useState(\"Europe/Dublin\")\n  const [temp, setTemp] = useState(\"7.3\")\n\n  // Run scripts with component mounts\n  useEffect(() => {\n    getLocation();\n\n    setInterval(() => {\n      getTime();\n    }, 1000);\n  }, []);\n\n  // Fahrenheit to Celsius\n  const fToC = (temp) => {\n    const celsius = Math.floor((temp - 32) / 1.8);\n    return celsius;\n  }\n\n  const getWeather = async (latitude, longitude) => {\n    const forecast = await axios.get(`https://api.darksky.net/forecast/90f6dc370d1bbd73bc4e6216147431ff/${latitude},${longitude}`);\n    let time = new Date(forecast.data.currently.time);\n    let hours = time.getDay();\n    console.log(hours)\n\n    setWeather(forecast.data.currently);\n    setDaily(forecast.data.daily);\n    setHourly(forecast.data.hourly);\n    setZone(forecast.data.timezone);\n    setTemp(fToC(forecast.data.currently.temperature));\n\n  }\n\n  // Changes single digit number into double. ie: 1 => 01\n  const setNum = (num) => {\n    let number = num;\n    switch (num) {\n      case 0: number = \"00\";\n        break;\n      case 1: number = \"01\";\n        break;\n      case 2: number = \"02\";\n        break;\n      case 3: number = \"03\";\n        break;\n      case 4: number = \"04\";\n        break;\n      case 5: number = \"05\";\n        break;\n      case 6: number = \"06\";\n        break;\n      case 7: number = \"07\";\n        break;\n      case 8: number = \"08\";\n        break;\n      case 9: number = \"09\";\n        break;\n    }\n\n    return number;\n  }\n\n\n  // Get Current Time\n  const getTime = () => {\n    // Variables\n    const date = new Date();\n    let hour = setNum(date.getHours());\n    let minute = setNum(date.getMinutes());\n    let second = setNum(date.getSeconds());\n    const day = date.getDay();\n    let dayMonth = setNum(date.getDate());\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    // Set State\n    setTime(`${hour} : ${minute} : ${second}`);\n    setDay(`${days[day]}, ${dayMonth}`);\n  };\n\n\n\n  // Get Location\n  const getLocation = () => {\n    let msg;\n    const success = (position) => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n\n      // Passes location values to Weather API\n      getWeather(latitude, longitude);\n    }\n\n    const error = () => {\n      \"Helpppp\"\n    }\n\n    if (!navigator.geolocation) {\n      msg = 'Geolocation is not supported by your browser';\n    } else {\n      msg = 'Locatingâ€¦';\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n\n\n  return (\n    <>\n      <Forecast weather={weather} zone={zone} temp={temp} />\n      <Today day={day} daily={daily} fToC={fToC} />\n      {/* Hourly */}\n      {/* Daily */}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}