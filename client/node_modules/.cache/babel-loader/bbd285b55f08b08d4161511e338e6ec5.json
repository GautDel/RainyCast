{"ast":null,"code":"var _jsxFileName = \"/Users/gauthierdelalleau/Desktop/weather-app/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\nfunction App() {\n  // State\n  const [time, setTime] = useState(\"Fetching Time...\");\n  const [day, setDay] = useState(\" Fetching Date...\");\n  const [weather, setWeather] = useState(\"Fetching Weather...\");\n  const [zone, setZone] = useState(\"Fetching Zone...\");\n  const [temp, setTemp] = useState(\"Fetching Temperature...\"); // Run scripts with component mounts\n\n  useEffect(() => {\n    getLocation();\n    setInterval(() => {\n      getTime();\n    }, 1000);\n  }, []); // Fahrenheit to Celsius\n\n  const fToC = temp => {\n    const celsius = (temp - 32) / 1.8;\n    setTemp(celsius);\n  };\n\n  const getWeather = async (latitude, longitude) => {\n    const forecast = await axios.get(`https://api.darksky.net/forecast/90f6dc370d1bbd73bc4e6216147431ff/${latitude},${longitude}`);\n    setWeather(forecast.data.currently);\n    setZone(forecast.data.timezone);\n    fToC(weather.temperature);\n  }; // Changes single digit number into double. ie: 1 => 01\n\n\n  const setNum = num => {\n    let number = num;\n\n    switch (num) {\n      case 0:\n        number = \"00\";\n        break;\n\n      case 1:\n        number = \"01\";\n        break;\n\n      case 2:\n        number = \"02\";\n        break;\n\n      case 3:\n        number = \"03\";\n        break;\n\n      case 4:\n        number = \"04\";\n        break;\n\n      case 5:\n        number = \"05\";\n        break;\n\n      case 6:\n        number = \"06\";\n        break;\n\n      case 7:\n        number = \"07\";\n        break;\n\n      case 8:\n        number = \"08\";\n        break;\n\n      case 9:\n        number = \"09\";\n        break;\n    }\n\n    return number;\n  }; // Get Current Time\n\n\n  const getTime = () => {\n    // Variables\n    const date = new Date();\n    let hour = setNum(date.getHours());\n    let minute = setNum(date.getMinutes());\n    let second = setNum(date.getSeconds());\n    const day = date.getDay();\n    let dayMonth = setNum(date.getDate());\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; // Set State\n\n    setTime(`${hour} : ${minute} : ${second}`);\n    setDay(`${days[day]}, ${dayMonth}`);\n  }; // Get Location\n\n\n  const getLocation = () => {\n    let msg;\n\n    const success = position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude; // Passes location values to Weather API\n\n      getWeather(latitude, longitude);\n    };\n\n    const error = () => {\n      \"Helpppp\";\n    };\n\n    if (!navigator.geolocation) {\n      msg = 'Geolocation is not supported by your browser';\n    } else {\n      msg = 'Locating…';\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, time), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, day), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, weather.summary));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/gauthierdelalleau/Desktop/weather-app/src/App.js"],"names":["React","useState","useEffect","axios","App","time","setTime","day","setDay","weather","setWeather","zone","setZone","temp","setTemp","getLocation","setInterval","getTime","fToC","celsius","getWeather","latitude","longitude","forecast","get","data","currently","timezone","temperature","setNum","num","number","date","Date","hour","getHours","minute","getMinutes","second","getSeconds","getDay","dayMonth","getDate","days","msg","success","position","coords","error","navigator","geolocation","getCurrentPosition","summary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\nfunction App() {\n\n  // State\n  const [time, setTime] = useState(\"Fetching Time...\");\n  const [day, setDay] = useState(\" Fetching Date...\");\n  const [weather, setWeather] = useState(\"Fetching Weather...\");\n  const [zone, setZone] = useState(\"Fetching Zone...\")\n  const [temp, setTemp] = useState(\"Fetching Temperature...\")\n\n  // Run scripts with component mounts\n  useEffect(() => {\n    getLocation();\n\n    setInterval(() => {\n      getTime();\n    }, 1000);\n  }, []);\n\n  // Fahrenheit to Celsius\n  const fToC = (temp) => {\n    const celsius = (temp - 32) / 1.8;\n\n    setTemp(celsius);\n  }\n\n  const getWeather = async (latitude, longitude) => {\n    const forecast = await axios.get(`https://api.darksky.net/forecast/90f6dc370d1bbd73bc4e6216147431ff/${latitude},${longitude}`);\n\n    setWeather(forecast.data.currently);\n    setZone(forecast.data.timezone);\n    fToC(weather.temperature);\n\n  }\n\n  // Changes single digit number into double. ie: 1 => 01\n  const setNum = (num) => {\n    let number = num;\n    switch (num) {\n      case 0: number = \"00\";\n        break;\n      case 1: number = \"01\";\n        break;\n      case 2: number = \"02\";\n        break;\n      case 3: number = \"03\";\n        break;\n      case 4: number = \"04\";\n        break;\n      case 5: number = \"05\";\n        break;\n      case 6: number = \"06\";\n        break;\n      case 7: number = \"07\";\n        break;\n      case 8: number = \"08\";\n        break;\n      case 9: number = \"09\";\n        break;\n    }\n\n    return number;\n  }\n\n\n  // Get Current Time\n  const getTime = () => {\n    // Variables\n    const date = new Date();\n    let hour = setNum(date.getHours());\n    let minute = setNum(date.getMinutes());\n    let second = setNum(date.getSeconds());\n    const day = date.getDay();\n    let dayMonth = setNum(date.getDate());\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    // Set State\n    setTime(`${hour} : ${minute} : ${second}`);\n    setDay(`${days[day]}, ${dayMonth}`);\n  };\n\n\n\n  // Get Location\n  const getLocation = () => {\n    let msg;\n    const success = (position) => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n\n      // Passes location values to Weather API\n      getWeather(latitude, longitude);\n    }\n\n    const error = () => {\n      \"Helpppp\"\n    }\n\n    if (!navigator.geolocation) {\n      msg = 'Geolocation is not supported by your browser';\n    } else {\n      msg = 'Locating…';\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n\n\n  return (\n    <>\n      <h1>{time}</h1>\n      <h2>{day}</h2>\n      <h2>{weather.summary}</h2>\n\n      {/* Weather bg => based on weather app */}\n      {/* Time */}\n      {/* Date */}\n      {/* Forecast */}\n      {/* Dark Sky link */}\n      {/* My name */}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}